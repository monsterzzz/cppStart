#include <iostream>
using namespace std;

int main() {
    /*
        指针
        指针就是内存地址
        通过指针的形式来保存内存地址
        获得内存地址的方式就是  &

    */

    int a = 10;
    int* p = &a;

    /*

    a -> 地址 0xffffff -> 10
    p -> 地址 0xffffff -> 10
    *p 为访问这里地址里面的植

    */

    cout << a << endl;
    cout << p << endl;

    // 解引用 就是在指针前加*
    *p;       // 现在这个就是 指针所指向的内存地址里面的值
    *p = 15;  // 现在修改了这个地址里面的值,所以 a 的值也等于15
    int b = *p;
    cout << b << endl;

    /*

    空指针
    指针变量指向内存中编号为0的空间

    野指针
    指针变量指向的内存空间不是本程序所开辟的

    */

    int* p1 = 0;  // 空指针, 指向了编号为0的空间
    int* p2;      // 空指针, 声明了指针却未赋值

    int* p3 = (int*)0xffff52;

    //  *p2 = 100;
    //*p1 = 100;  // 错误，空指针既不能访问也不能写入  *p1 访问  =100 写入
    //这句话就是把 100这个值写入 p1指向的内存空间中

    // *p3 = 100;

    /*
        指针常量

    */

    a = 100;
    b = 200;

    const int* p4 = &a;
    //  常量指针  指针的指向可以修改，指向的值不能修改
    p4 = &b;  //修改了指针指向
    //*p4 = 500;  // 错误！ 常量指针修改了指向的值

    int* const p5 = &a;
    // 指针常量   指针的指向不可以修改，值可以修改，
    *p5 = 300;
    // p5 = &b; 错误，修改了指向

    const int* const p6 = &a;
    // const修饰指针 const修饰常量 指针的指向和值都不可以更改

    // p6 = &b;    // 错误，修改了指向
    // *p6 = 600;  // 错误！ 常量指针修改了指向的值
}